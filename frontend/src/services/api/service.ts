// services/api/service.ts
import { BASE_API_URL } from 'constants/index';
import axios from 'axios';
import TokensService from 'services/token/service';
import UserService from 'services/user/service';

/**
 * –≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç (apiClient) ‚Äî –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, 
 * –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –¥–ª—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
 */
const apiClient = axios.create({
  baseURL: BASE_API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

/**
 * –≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç (apiClientWithAuth) ‚Äî —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π,
 * –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ü–µ–ø–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization, 
 * –∞ —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 401 (–∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω).
 */
const apiClientWithAuth = axios.create({
  baseURL: BASE_API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// ----- 1) –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤: –¥–æ–±–∞–≤–ª—è–µ–º access-—Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ -----
apiClientWithAuth.interceptors.request.use(
  (config) => {
    // –î–æ—Å—Ç–∞–µ–º access-—Ç–æ–∫–µ–Ω –∏–∑ localStorage (—á–µ—Ä–µ–∑ TokensService)
    const token = TokensService.getAccessToken();
    console.log("üîë Access Token –≤ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä–µ:", token);

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (users/auth/token/) –∏–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤—Ö–æ–¥–∞ ‚Äî
    // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ–π–º–∞—Ç—å –ª–∏—à–Ω–∏–π 401.
    const url = config.url;
    if (url === "users/auth/token/" || url?.startsWith("users/auth/providers")) {
      return config;
    }

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }

    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// ----- 2) –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤: –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ—Ñ—Ä–µ—à–∏—Ç—å access-—Ç–æ–∫–µ–Ω –ø—Ä–∏ 401 -----
apiClientWithAuth.interceptors.response.use(
  (response) => {
    return response;
  },
  async (error) => {
    const originalConfig = error.config;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ 
    // –∏ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª 401, –∏ –∑–∞–ø—Ä–æ—Å –µ—â—ë –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª—Å—è.
    if (originalConfig.url !== 'users/auth/token/' && error.response) {
      if (error.response.status === 401 && !originalConfig._retry) {
        originalConfig._retry = true;

        try {
          // –î–æ—Å—Ç–∞—ë–º refresh-—Ç–æ–∫–µ–Ω
          const refreshToken = TokensService.getRefreshToken();
          if (!refreshToken) {
            throw new Error("Refresh token not found");
          }

          // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å access-—Ç–æ–∫–µ–Ω
          const response = await apiClientWithAuth.post('users/auth/token/', {
            refresh: refreshToken,
          });

          const { access } = response.data;
          if (access) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π access-—Ç–æ–∫–µ–Ω –≤ localStorage
            TokensService.setAccessToken(access);

            // –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
            originalConfig.headers['Authorization'] = `Bearer ${access}`;
            return apiClientWithAuth(originalConfig);
          }
        } catch (refreshError) {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
          TokensService.clear();
          UserService.removeUser();
          window.location.href = "/sign-in";
          return Promise.reject(refreshError);
        }
      }
    }
    return Promise.reject(error);
  }
);

export { apiClient, apiClientWithAuth };
